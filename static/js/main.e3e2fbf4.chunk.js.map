{"version":3,"sources":["components/PrevNext.js","components/list/UpdateList.js","components/list/AddList.js","components/list/FavButton.js","components/Player.js","API/YouTubeAPI.js","components/searching/SearchRVids.js","components/list/SelectList.js","components/searching/Search.js","components/searching/SetInput.js","API/ShazamAPI.js","components/searching/SearchArtist.js","components/searching/ArtistSuggest.js","components/searching/HandleInput.js","components/searching/RelatedVideo.js","API-aaa.js","API-g1.js","components/text2speech.js","components/MainScreen.js","assets/christmas-1920.jpg","assets/christmas-dark-1920.jpg","components/DarkMode.js","components/SearchScreen.js","components/routing/AboutUs.js","components/routing/ContactUs.js","config/index.js","components/routing/Main.js","reportWebVitals.js","index.js"],"names":["PrevNext","props","onSwitch","event","searchIndex","target","id","index","array","length","prevNextState","className","name","onClick","updateList","list","JSON","parse","localStorage","getItem","addList","Promise","resolve","pList","item","title","vtitle","url","artist","unshift","then","res","addListState","FavButton","Player","opts","height","width","videoId","onPlay","ytAPI","axios","create","baseURL","params","part","maxResults","key","type","videoCategoryID","headers","searchResult","a","get","relatedToVideoId","response","data","items","filter","snippet","map","thumbnailurl","thumbnails","default","rVideos","searchRVidsState","document","getElementById","value","disabled","SearchRVids","SelectList","select","video","favourites","find","history","selectListState","onChange","selected","uuidv4","preventDefault","q","inputSong","inputArtist","searchResults","searchState","search","setInput","output","result","handleInputState","ShazamAPI","offset","limit","searchArtist","song","outerP","innerP","reject","notFound","term","found","Object","entries","catch","error","console","log","tracks","hits","track","subtitle","artistResultsState","selectRVidsState","artSuggest","HandleInput","debouncedChangeHandler","useCallback","debounce","onSubmit","placeholder","artistResults","RelatedVideos","rvideos","sTitle","src","alt","API","TextToSpeech","response2","response3","response4","waitLyrics","sendOutput","useState","playCount","setplayCount","rcvAudio","setrcvAudio","reserveAudio2","setreserveAudio2","reserveAudio3","setreserveAudio3","reserveAudio4","setreserveAudio4","genderSubmit","setgenderSubmit","handleGenderChange","e","testABC","replace","part1","part2","part3","part4","substring","testLength","lastIndexOf","apikey","apilang","apicodec","apiformat","apiB64Status","status","checkPlay","defaultValue","style","display","autoPlay","onEnded","controls","playAudio","OvhLyric","fetchOvhData","bind","handleFormSubmit","state","lyrics","displayErrorMsg","this","cleanArtist","cleanSong","setState","submitContent","readOnly","rows","cols","React","Component","DarkMode","xmas","darkMode","setdarkMode","cssState","setcssState","backgroundColor","backgroundImage","xmasImage2","body","xmasImage","SearchScreen","searchTitle","searchURL","searchVTitle","relatedVids","setItem","stringify","artistSearch","MainScreen","RelatedVideo","AboutUs","ContactUs","env","process","config","toUpperCase","Main","to","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"mWA4BeA,MAvBf,SAAkBC,GACd,SAASC,EAASC,GACd,IAEIC,EAA4B,SAFjBD,EAAME,OAEIC,GAAgBL,EAAMM,MAAQ,EAAIN,EAAMM,MAAQ,EAC9C,IAAvBN,EAAMO,MAAMC,UAGZL,EAAc,GAAKA,EAAeH,EAAMO,MAAMC,OAAS,KACvDL,EAAc,GAGlBH,EAAMS,cAAcN,IAGxB,OACI,gCACI,wBAAQO,UAAU,SAASL,GAAG,OAAOM,KAAK,OAAOC,QAASX,EAA1D,sBACA,wBAAQS,UAAU,SAASL,GAAG,OAAOM,KAAK,OAAOC,QAASX,EAA1D,sBCbGY,MARf,SAAoBC,GAChB,OAA+C,OAA3CC,KAAKC,MAAMC,aAAaC,QAAQJ,IACzB,GAEAC,KAAKC,MAAMC,aAAaC,QAAQJ,KCoBhCK,MAxBf,SAAiBnB,EAAOI,GACV,IAAIgB,SAAQ,SAACC,GACnB,IAAIC,EAAQtB,EAAMc,KAEZS,EAAO,CACTC,MAAOxB,EAAMwB,MACbC,OAAQzB,EAAMyB,OACdC,IAAK1B,EAAM0B,IACXC,OAAQ3B,EAAM2B,QAGlBL,EAAMM,QAAQL,GAOdF,EALY,CACRP,KAAMQ,EACNlB,cAMNyB,MAAK,SAAAC,GAAG,OAAI9B,EAAM+B,aAAaD,OCNtBE,MAZf,SAAmBhC,GACf,OACI,wBACIU,UAAU,SACVL,GAAG,SACHO,QAAS,SAACV,GACNiB,EAAQnB,EAAOE,EAAME,OAAOC,KAJpC,gC,QCkBO4B,MAjBf,SAAgBjC,GAMZ,OACI,cAAC,IAAD,CACIkC,KAPK,CACTC,OAAQ,MACRC,MAAO,OAMHC,QAASrC,EAAM0B,IACfY,OAAQ,WACJnB,EAAQnB,EAAO,c,yBCChBuC,EAZDC,IAAMC,OAAO,CACvBC,QAAS,wCACTC,OAAQ,CACJC,KAAM,UACNC,WAAY,GACZC,IANI,0CAOJC,KAAM,QACNC,gBAAiB,MAErBC,QAAS,K,4CCbb,WAA2BjD,EAAOkD,GAAlC,eAAAC,EAAA,sEACwBZ,EAAMa,IAAI,UAAW,CACrCT,OAAQ,CACJU,iBAAkBH,KAEvBrB,MAAK,SAACyB,GAcL,OAbiBA,EAATC,KAEmBC,MAAMC,QAAO,SAAClC,GACrC,OAAuB,MAAhBA,EAAKmC,WAGaC,KAAI,SAACpC,GAC9B,MAAO,CACHE,OAAQF,EAAKmC,QAAQlC,MACrBE,IAAKH,EAAKlB,GAAGgC,QACbuB,aAAcrC,EAAKmC,QAAQG,WAAWC,QAAQpC,WAhB9D,OACQqC,EADR,OAsBI/D,EAAMgE,iBAAiBD,GACvBE,SAASC,eAAe,cAAcC,MAAQ,UAC9CF,SAASC,eAAe,YAAYC,MAAQ,UAC5CF,SAASC,eAAe,gBAAgBE,UAAW,EAzBvD,4C,sBA4BeC,M,8CCcAC,MAtCf,SAAoBtE,GAChB,SAASuE,EAAOrE,GACJ,IAAIkB,SAAQ,SAACC,GACjB,IAAMjB,EAASF,EAAME,OACfoE,EAAsB,eAAdpE,EAAOC,GAAsBL,EAAMyE,WAAWC,MAAK,SAAAnD,GAAI,OAAIA,EAAKE,SAAWrB,EAAO+D,SAASnE,EAAM2E,QAAQD,MAAK,SAAAnD,GAAI,OAAIA,EAAKE,SAAWrB,EAAO+D,SAG3JE,EAAYrE,EAAOwE,EAAM9C,KACzBL,EAAQmD,MAGV3C,MAAK,SAAC2C,GACJxE,EAAM4E,gBAAgBJ,GAEtBP,SAASC,eAAe,cAAcC,MAAQ,UAC9CF,SAASC,eAAe,WAAWC,MAAQ,aAInD,OAEI,cADA,CACA,iBACI,yBAAQzD,UAAU,WAAWL,GAAG,aAAawE,SAAUN,EAAvD,UACI,wBAAQJ,MAAM,UAAUW,UAAQ,EAACV,UAAQ,EAAzC,wBACCpE,EAAMyE,WAAWd,KAAI,SAACpC,GACnB,OAAO,iCAAwBA,EAAKE,QAAhBsD,qBAG5B,yBAAQrE,UAAU,WAAWL,GAAG,UAAUwE,SAAUN,EAApD,UACI,wBAAQJ,MAAM,UAAUW,UAAQ,EAACV,UAAQ,EAAzC,qBACCpE,EAAM2E,QAAQhB,KAAI,SAACpC,GAChB,OAAO,iCAAwBA,EAAKE,QAAhBsD,yB,6DClCxC,WAAsB/E,EAAOE,GAA7B,eAAAiD,EAAA,6DACIjD,EAAM8E,iBADV,SAG8BzC,EAAMa,IAAI,UAAW,CAC3CT,OAAQ,CACJsC,EAAGjF,EAAMkF,UAAY,IAAMlF,EAAMmF,eAEtCtD,MAAK,SAACyB,GAUL,OATiBA,EAATC,KACYC,MAAMG,KAAI,SAACpC,GAC3B,MAAO,CACHE,OAAQF,EAAKmC,QAAQlC,MACrBA,MAAOxB,EAAMkF,UACbxD,IAAKH,EAAKlB,GAAGgC,QACbV,OAAQ3B,EAAMmF,mBAd9B,OAGQC,EAHR,OAmBIpF,EAAMqF,YAAYD,GAClBf,EAAYrE,EAAOoF,EAAc,GAAG1D,KACpCuC,SAASC,eAAe,cAAcC,MAAQ,UAC9CF,SAASC,eAAe,YAAYC,MAAQ,UAC5CF,SAASC,eAAe,aAAaC,MAAQ,GAvBjD,4C,sBA0BemB,M,8CCrBAC,MARf,SAAkBvF,EAAOE,GACrB,IAAMsF,EAAS,CACXC,OAAQvF,EAAME,OAAO+D,MACrB/D,OAAQF,EAAME,OAAOC,IAEzBL,EAAM0F,iBAAiBF,ICOZG,EAZGnD,IAAMC,OAAO,CAC3BC,QAAS,iCACTC,OAAQ,CAACiD,OAAQ,IAAKC,MAAO,KAC7B5C,QAAS,CACL,kBAAmB,wBACnB,iBAAkB,wDCwCX6C,MA3Cf,SAAsB9F,EAAOwE,EAAOuB,EAAM7F,GAEtC,IAAI8F,EAAS,IAAI5E,SAAQ,SAACC,GAEtB,IAAI4E,EAAS,IAAI7E,QAAJ,uCAAY,WAAOC,EAAS6E,GAAhB,eAAA/C,EAAA,6DACjBgD,EAAW,CAAC,CAAE3E,MAAO,YAAaG,OAAQ,cADzB,SAEHgE,EAAUvC,IAAI,UAAW,CACvCT,OAAQ,CAAEyD,KAAML,KACjBlE,MAAK,SAACwE,GACDC,OAAOC,QAAQF,EAAM9C,MAAM/C,QAAU,EACrCa,EAAQgF,GAERH,EAAOC,MAEZK,OAAM,SAACC,GACFC,QAAQC,IAAI,wBAXC,yDAAZ,yDAyBbtF,EAVe4E,EAAOpE,MAAK,SAACwE,GAQxB,OAPaA,EAAM9C,KAAKqD,OAAOC,KACXlD,KAAI,SAACpC,GACrB,MAAO,CACHC,MAAOD,EAAKuF,MAAMtF,MAClBG,OAAQJ,EAAKuF,MAAMC,oBAQnCf,EAAOnE,MAAK,SAACC,GAOT,OANA9B,EAAMgH,mBAAmBlF,GACrB5B,EAAME,OAAOC,KAAO0F,GACpB/F,EAAMiH,iBAAiBzC,EAAO1C,GAElCmC,SAASC,eAAe,cAAcC,MAAQ,UAC9CF,SAASC,eAAe,YAAYC,MAAQ,UACrCrC,MCtBAoF,MAhBf,SAAoBlH,EAAOE,GAEf,IAAIkB,SAAQ,SAACC,EAAS6E,GACC,KAAvBhG,EAAME,OAAO+D,MACb+B,EAAOQ,QAAQC,IAAI,sBAEnBtF,EAAQnB,EAAME,OAAO+D,UAI3BtC,MAAK,SAACC,GACJgE,EAAa9F,EAAO,IAAK8B,EAAK5B,GAC9B+D,SAASC,eAAe,YAAYE,UAAW,KAChDoC,OAAM,SAAA1E,GAAG,OAAIA,MCyCLqF,MA/Cf,SAAqBnH,GACjB,IAAMoH,EAAyBC,sBAC3BC,KAAS,SAACpH,GAAD,OAAWgH,EAAWlH,EAAOE,KAAQ,KAC5C,CAACF,IAEP,OACI,uBACIuH,SAAU,SAACrH,GAAD,OAAWoF,EAAOtF,EAAOE,IADvC,UAGI,uBACI6C,KAAK,OACLyE,YAAY,yBACZnH,GAAG,YACHwE,SAAUuC,IAGd,yBACI/G,GAAG,WACHK,UAAU,WACVmE,SAAU,SAAC3E,GAAD,OAAWqF,EAASvF,EAAOE,IACrCiE,MAAOnE,EAAMkF,UACbd,UAAQ,EALZ,UAOI,wBAAQD,MAAM,UAAd,6BACCnE,EAAMyH,cAAc9D,KAAI,SAACpC,GACtB,OAAO,iCAAwBA,EAAKC,OAAhBuD,qBAI5B,yBACI1E,GAAG,aACHK,UAAU,WACVmE,SAAU,SAAC3E,GAAD,OAAWqF,EAASvF,EAAOE,IACrCiE,MAAOnE,EAAMmF,YACbf,UAAQ,EALZ,UAOI,wBAAQD,MAAM,UAAd,+BACCnE,EAAMyH,cAAc9D,KAAI,SAACpC,GACtB,OAAO,iCAAwBA,EAAKI,QAAhBoD,qBAI5B,wBAAQrE,UAAU,SAASL,GAAG,eAAe+D,UAAQ,EAArD,wBCXGsD,MAnCf,SAAuB1H,GACnB,SAASuE,EAAOrE,GACJ,IAAIkB,SAAQ,SAACC,GACjB,IAAMjB,EAASF,EAAME,OAErBiB,EADcrB,EAAM2H,QAAQjD,MAAK,SAAAnD,GAAI,OAAIA,EAAKE,SAAWrB,EAAOC,UAIlEwB,KAAF,uCAAO,WAAO2C,GAAP,eAAArB,EAAA,sEACkBqB,EAAM/C,OADxB,OACGmG,EADH,OAEH9B,EAAa9F,EAAOwE,EAAOoD,EAAQ1H,GAFhC,2CAAP,uDAOJ,OACI,qBAAKQ,UAAU,cAAf,SACKV,EAAM2H,QAAQhE,KAAI,SAACpC,GAChB,OACI,sBAAoBlB,GAAIkB,EAAKE,OAA7B,UACI,qBACIf,UAAU,qBACVL,GAAIkB,EAAKE,OACToG,IAAG,UAAKtG,EAAKqC,cACbhD,QAAS2D,EACTuD,IAAI,gBAER,mBAAGpH,UAAU,iBAAb,SAA+Ba,EAAKE,WAR9BsD,qBCpBfgD,EALHvF,IAAMC,OAAO,CACrBC,QAAS,+B,OCOEqF,EARHvF,IAAMC,OAAO,CACrBC,QAAS,iDACTO,QAAS,CACL,kBAAmB,yCACnB,iBAAkB,wDCgMX+E,MAlMf,SAAsBhI,GAElB,IAKIiI,EACAC,EACAC,EAPAC,EAAa,OAEbA,EAD4B,IAA5BpI,EAAMqI,WAAW7H,QAAqC,wBAArBR,EAAMqI,WAC1B,OACG,SAMpB,MAAkCC,mBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0CJ,mBAAS,IAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAA0CN,mBAAS,IAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAA0CR,mBAAS,IAAnD,mBAAOS,EAAP,KAAsBC,EAAtB,KACA,EAAwCV,mBAAS,SAAjD,mBAAOW,EAAP,KAAqBC,EAArB,KAYA,SAASC,EAAoBC,GACzBF,EAAgBE,EAAEhJ,OAAO+D,OA7BJ,4CAgCzB,WAA6BiF,GAA7B,qCAAAjG,EAAA,6DACIiG,EAAEpE,iBACF0B,QAAQC,IAAI,qBAAsB3G,GAClC0G,QAAQC,IAAI,oBAAqB3G,EAAMqI,YAEvC3B,QAAQC,IAAI,2BAA4B3G,EAAMqI,WAAW7H,QAErD6I,EAAUrJ,EAAMqI,WAAWiB,QAAQ,MAAM,MAC7CD,EAAUrJ,EAAMqI,WAAWiB,QAAQ,MAAM,MASrCC,EAAQ,GACRC,EAAQ,GACRC,EAAQ,GACRC,EAAQ,GAERL,EAAQ7I,OAAS,MACjB+I,EAAQF,EAAQM,UAAU,EAAG,MACzBC,EAAaL,EAAMM,YAAY,MACnCnD,QAAQC,IAAI,qBAAsBiD,GAElCL,EAAQF,EAAQM,UAAU,EAAIC,EAAW,GACzCJ,EAAQH,EAAQM,UAAWC,EAAW,GACtCP,EAAUG,EAENA,EAAMhJ,OAAS,OACfgJ,EAAQA,EAAMG,UAAU,EAAG,MAC3BC,EAAaJ,EAAMK,YAAY,MAC/BnD,QAAQC,IAAI,qBAAsBiD,GAClCJ,EAAQA,EAAMG,UAAU,EAAIC,EAAW,GACvCH,EAAQJ,EAAQM,UAAWC,EAAW,GACtCP,EAAUI,EAENA,EAAMjJ,OAAS,OACfiJ,EAAQA,EAAME,UAAU,EAAG,MAC3BC,EAAaH,EAAMI,YAAY,MAC/BnD,QAAQC,IAAI,qBAAsBiD,GAClCH,EAAQA,EAAME,UAAU,EAAIC,EAAW,GACvCF,EAAQL,EAAQM,UAAWC,EAAW,MAI3CL,EAAQF,EAEf3C,QAAQC,IAAI,gBAAiB4C,GAC7B7C,QAAQC,IAAI,gBAAiB6C,GAC7B9C,QAAQC,IAAI,gBAAiB8C,GAC7B/C,QAAQC,IAAI,gBAAiB+C,GAIzBI,EAAS,mCAGTC,EAAU,QACVC,EAAW,MAEXC,EAAY,iBACZC,GAAe,EAhEvB,oBAoE+BnC,EAAI3E,IAAJ,gBAAiB0G,EAAjB,eAA8BC,EAA9B,cAA2CC,EAA3C,cAAyDC,EAAzD,cAAwEhB,EAAxE,gBAA4FM,EAA5F,gBAAyGW,IApExI,WAoEc5G,EApEd,OAsEsB,KAAVkG,EAtEZ,kCAuE8BzB,EAAI3E,IAAJ,gBAAiB0G,EAAjB,eAA8BC,EAA9B,cAA2CC,EAA3C,cAAyDC,EAAzD,cAAwEhB,EAAxE,gBAA4FO,EAA5F,gBAAyGU,IAvEvI,WAuEYjC,EAvEZ,OAwEYW,EAAiBX,EAAU1E,MAEb,KAAVkG,EA1EhB,kCA2EkC1B,EAAI3E,IAAJ,gBAAiB0G,EAAjB,eAA8BC,EAA9B,cAA2CC,EAA3C,cAAyDC,EAAzD,cAAwEhB,EAAxE,gBAA4FQ,EAA5F,gBAAyGS,IA3E3I,WA2EgBhC,EA3EhB,OA4EgBY,EAAiBZ,EAAU3E,MAEb,KAAVmG,EA9EpB,kCA+EsC3B,EAAI3E,IAAJ,gBAAiB0G,EAAjB,eAA8BC,EAA9B,cAA2CC,EAA3C,cAAyDC,EAAzD,cAAwEhB,EAAxE,gBAA4FS,EAA5F,gBAAyGQ,IA/E/I,QA+EoB/B,EA/EpB,OAgFoBa,EAAiBb,EAAU5E,MAhF/C,QAqFgC,MAApBD,EAAS6G,SACT3B,EAAa,GACbE,EAAYpF,EAASC,OAvFjC,0DA2FQmD,QAAQC,IAAI,qCACZ6B,EAAa,GA5FrB,+EAhCyB,sBAuJzB,SAAS4B,IACL,GAAkB,IAAd7B,EAIJ,OAAkB,IAAdA,GACAC,EAAa,QACb9B,QAAQC,IAAI,cAAe4B,IAGb,IAAdA,GACAC,EAAa,GACb9B,QAAQC,IAAI,cAAe4B,QAC3BG,EAAYK,IAGE,IAAdR,GACAC,EAAa,GACb9B,QAAQC,IAAI,cAAe4B,QAC3BG,EAAYG,IAGE,IAAdN,GACAC,EAAa,GACb9B,QAAQC,IAAI,cAAe4B,QAC3BG,EAAYC,SAHhB,EApBIjC,QAAQC,IAAI,cAAe4B,GA4BnC,OACI,8BACI,gCACI,uBAAMhB,SAxLO,4CAwLb,UAnKJ,yBAAQlH,GAAG,OAAOM,KAAO,SAAS0J,aAAa,QAAQxF,SAAUsE,EAAoBmB,MAAO,CAACC,QAAQnC,GAArG,UACI,wBAAsBjE,MAAM,QAA5B,mBAAY,WACZ,wBAAsBA,MAAM,OAA5B,iBAAY,cAmKR,uBAAOzD,UAAU,SAASqC,KAAK,SAASoB,MAAM,eAAemG,MAAO,CAACC,QAAQnC,QAzD3E,WAEd,GAAe,KAAXK,EAAJ,CAKA,GAAgC,UAA5BA,EAASkB,UAAU,EAAE,GAMzB,OACI,8BAEA,uBAAOtJ,GAAG,cAAcwH,IAAKY,EAAU+B,SAAS,WAAWC,QAASL,EAAWM,UAAQ,EAACJ,MAAO,CAACnI,OAAQ,QAAxG,mCARAuE,QAAQC,IAAI8B,IAmDPkC,SC1LXC,E,kDACF,WAAY5K,GAAQ,IAAD,8BACf,gBACK6K,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,MAAQ,CAGTC,OAAQ,GACR9F,YAAa,GACbD,UAAW,GACXgG,gBAAiB,IAVN,E,qDAcnB,WACIxE,QAAQC,IAAI,kCACZwE,KAAKN,iB,8BAGT,SAAiBzB,GAAI,IAAD,OAChBA,EAAEpE,iBAEQ,IAAI5D,SAAQ,SAACC,GACnB,IAAM+J,EAAc,EAAKpL,MAAMmF,YAAYmE,QACvC,+BACA,IAEE+B,EAAY,EAAKrL,MAAMkF,UAAUoE,QACnC,+BACA,IAGJ,EAAKgC,SAAL,2BACO,EAAKN,OADZ,IAEI7F,YAAaiG,EACblG,UAAWmG,KAGf3E,QAAQC,IAAI,SAAU,EAAKqE,MAAM7F,aACjCuB,QAAQC,IAAI,SAAU,EAAKqE,MAAM9F,WACjC7D,EAAQ,cAGVQ,MAAK,SAACC,GACJ4E,QAAQC,IAAI7E,GACZ,EAAK+I,oB,iEAIb,8BAAA1H,EAAA,yDACIuD,QAAQC,IAAI,UAAWwE,KAAKH,MAAM7F,aAClCuB,QAAQC,IAAI,UAAWwE,KAAKH,MAAM9F,WAFtC,UAIYiG,KAAKH,MAAM7F,cAAegG,KAAKH,MAAM9F,UAJjD,iCAKmC6C,EAAI3E,IAAJ,WACf+H,KAAKH,MAAM7F,YADI,YACWgG,KAAKH,MAAM9F,YANzD,OAKkB5B,EALlB,OAQgB2H,EAAS,GACW,MAApB3H,EAAS6G,SACTc,EAAS3H,EAASC,KAAK0H,QAM3BE,KAAKG,SAAL,2BACOH,KAAKH,OADZ,IAEIC,YAlBhB,0DAuBQE,KAAKG,SAAL,2BACOH,KAAKH,OADZ,IAEIC,OAAQ,yBAzBpB,0D,0EA+BA,WAKI,IAAQC,EAAoBC,KAAKH,MAAzBE,gBACAD,EAAWE,KAAKH,MAAhBC,OACJM,EAAgBN,EAepB,OACI,sBAAKvK,UAAU,WAAf,UACI,sBAAM6G,SAAU4D,KAAKJ,iBAArB,SACI,uBAAOrK,UAAU,SAASqC,KAAK,SAASoB,MAAM,qBAElD,qBAAKzD,UAAU,iBAAf,SACI,cAAC,EAAD,CAAc2H,WAAYkD,MAE9B,sBAAK7K,UAAU,iBAAiB4J,MAAO,CAAEC,QAA2B,IAAlBU,EAAOzK,OAAe,OAAS,UAAjF,UACI,0BACIgL,UAAQ,EACRhE,YAAY,uBACZrD,MAAO8G,EACPQ,KAAK,KACLC,KAAK,OAERR,Y,GAvHES,IAAMC,WA6HdhB,ICnIA,MAA0B,2CCA1B,MAA0B,gDCwC1BiB,MApCf,WAEI,IAEIC,EAAO,eAEX,EAAgCxD,mBAASwD,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgC1D,mBAAS,QAAzC,mBAAO2D,EAAP,KAAiBC,EAAjB,KAsBA,OACI,mCACI,wBAAQ5B,MAAO,CAAE6B,gBAAiB,YAAcxL,KAAK,WAAWC,QAtBxE,WAPU,iBAQFmL,GACAC,EARI,gBASJE,EAAY,SACZjI,SAASC,eAAe,aAAaoG,MAAM8B,gBAA3C,cAAoEC,EAApE,MAVI,iBAWGN,GACPC,EAAYF,GACZI,EAAY,QACZjI,SAASC,eAAe,aAAaoG,MAAM8B,gBAAkB,OAC7DnI,SAASqI,KAAKhC,MAAM8B,gBAAkB,QAE/BL,IAAaD,IACpBE,EAnBE,gBAoBFE,EAAY,OACZjI,SAASC,eAAe,aAAaoG,MAAM8B,gBAA3C,cAAoEG,EAApE,MAEJtI,SAASC,eAAe,aAAaxD,UAArC,kBAA4DuL,GAC5DhI,SAASqI,KAAKhC,MAAM5J,UAApB,kBAA2CuL,IAKvC,SAAuFF,OCrB7FS,E,kDACF,aAAe,IAAD,8BACV,gBACK/L,cAAgB,EAAKA,cAAcqK,KAAnB,gBACrB,EAAK/I,aAAe,EAAKA,aAAa+I,KAAlB,gBACpB,EAAKlG,gBAAkB,EAAKA,gBAAgBkG,KAArB,gBACvB,EAAKpF,iBAAmB,EAAKA,iBAAiBoF,KAAtB,gBACxB,EAAKzF,YAAc,EAAKA,YAAYyF,KAAjB,gBACnB,EAAK9G,iBAAmB,EAAKA,iBAAiB8G,KAAtB,gBACxB,EAAK7D,iBAAmB,EAAKA,iBAAiB6D,KAAtB,gBACxB,EAAK9D,mBAAqB,EAAKA,mBAAmB8D,KAAxB,gBAE1B,EAAKE,MAAQ,CACT9F,UAAW,GACXC,YAAa,GACbC,cAAe,GACfqC,cAAe,GACftH,YAAa,EACbsM,YAAa,GACbC,UAAW,GACX5G,aAAc,GACd6G,aAAc,GACdlI,WAAY,GACZE,QAAS,GACTiI,YAAa,IAvBP,E,4FA2Bd,8BAAAzJ,EAAA,sEAC2BtC,EAAW,cADtC,cACQ4D,EADR,gBAEwB5D,EAAW,WAFnC,OAEQ8D,EAFR,OAIIwG,KAAKG,SAAL,2BACOH,KAAKH,OADZ,IAEIvG,aACAE,aAPR,gD,gFAYA,SAAa7C,GACU,WAAfA,EAAI1B,QACJ+K,KAAKG,SAAS,CAAE7G,WAAY3C,EAAIhB,OAChCG,aAAa4L,QAAQ,aAAc9L,KAAK+L,UAAU3B,KAAKH,MAAMvG,eAE7D0G,KAAKG,SAAS,CAAE3G,QAAS7C,EAAIhB,OAC7BG,aAAa4L,QAAQ,UAAW9L,KAAK+L,UAAU3B,KAAKH,MAAMrG,a,2BAKlE,SAAcxE,GACVgL,KAAKG,SAAL,2BACOH,KAAKH,OADZ,IAEI7K,cACAsM,YAAatB,KAAKH,MAAM5F,cAAcjF,GAAaqB,MACnDkL,UAAWvB,KAAKH,MAAM5F,cAAcjF,GAAauB,IACjDoE,aAAcqF,KAAKH,MAAM5F,cAAcjF,GAAawB,OACpDgL,aAAcxB,KAAKH,MAAM5F,cAAcjF,GAAasB,Y,6BAK5D,SAAgB+C,GACZ2G,KAAKG,SAAL,2BACOH,KAAKH,OADZ,IAEIyB,YAAajI,EAAMhD,MACnBmL,aAAcnI,EAAM/C,OACpBiL,UAAWlI,EAAM9C,IACjBoE,aAActB,EAAM7C,OACpBxB,YAAa,EACbiF,cAAe+F,KAAKH,MAAM4B,iB,8BAKlC,SAAiBpH,GACS,aAAlBA,EAAOpF,QACP+K,KAAKG,SAAS,CAAEpG,UAAWM,EAAOC,SAClCxB,SAASC,eAAe,cAAcE,UAAW,IAEjD+G,KAAKG,SAAS,CAAEnG,YAAaK,EAAOC,SACpCxB,SAASC,eAAe,gBAAgBE,UAAW,K,yBAK3D,SAAYgB,GACR+F,KAAKG,SAAL,2BACOH,KAAKH,OADZ,IAEI+B,aAAc,GACd3H,gBACAqH,YAAarH,EAAc+F,KAAKH,MAAM7K,aAAaqB,MACnDmL,aAAcvH,EAAc+F,KAAKH,MAAM7K,aAAasB,OACpDiL,UAAWtH,EAAc+F,KAAKH,MAAM7K,aAAauB,IACjDoE,aAAcV,EAAc+F,KAAKH,MAAM7K,aAAawB,Y,8BAK5D,SAAiBiL,GACbzB,KAAKG,SAAS,CAAEsB,kB,8BAIpB,SAAiBpI,EAAO1C,GACpBqJ,KAAKG,SAAL,2BACOH,KAAKH,OADZ,IAEIyB,YAAa3K,EAAI,GAAGN,MACpBmL,aAAcnI,EAAM/C,OACpBiL,UAAWlI,EAAM9C,IACjBoE,aAAchE,EAAI,GAAGH,Y,gCAK7B,SAAmB8F,GACf0D,KAAKG,SAAS,CAAE7D,oB,oBAGpB,WACI,IAAQvC,EAAciG,KAAKH,MAAnB9F,UACAC,EAAgBgG,KAAKH,MAArB7F,YACAsC,EAAkB0D,KAAKH,MAAvBvD,cACAgF,EAAgBtB,KAAKH,MAArByB,YACAE,EAAiBxB,KAAKH,MAAtB2B,aACAD,EAAcvB,KAAKH,MAAnB0B,UACA5G,EAAiBqF,KAAKH,MAAtBlF,aACA3F,EAAgBgL,KAAKH,MAArB7K,YACAsE,EAAe0G,KAAKH,MAApBvG,WACAE,EAAYwG,KAAKH,MAAjBrG,QACAiI,EAAgBzB,KAAKH,MAArB4B,YAER,OACI,sBAAKvM,GAAG,WAAWK,UAAU,UAA7B,UACI,sBAAKA,UAAU,YAAf,UAEI,cAAC,EAAD,CACIwE,UAAWA,EACXC,YAAaA,EACbsC,cAAeA,EACf/B,iBAAkByF,KAAKzF,iBACvBL,YAAa8F,KAAK9F,YAClBrB,iBAAkBmH,KAAKnH,iBACvBgD,mBAAoBmE,KAAKnE,qBAG7B,cAAC,EAAD,CACIpC,gBAAiBuG,KAAKvG,gBACtBZ,iBAAkBmH,KAAKnH,iBACvBS,WAAYA,EACZE,QAASA,IAEb,cAAC,EAAD,OAEJ,sBAAKjE,UAAU,eAAf,UACI,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,WAAf,SAEI,cAAC,EAAD,CACII,KAAM6D,EACNnD,MAAOiL,EACPhL,OAAQkL,EACRjL,IAAKgL,EACL/K,OAAQmE,EACR/D,aAAcoJ,KAAKpJ,iBAG3B,sBAAKrB,UAAU,YAAf,UAEI,cAAC,EAAD,CACID,cAAe0K,KAAK1K,cACpBH,MAAOH,EAAaI,MAAO4K,KAAKH,MAAM5F,gBAO1C,cAAC,EAAD,CACItE,KAAM2D,EACNjD,MAAOiL,EACPhL,OAAQkL,EACRjL,IAAKgL,EACL/K,OAAQmE,EACR/D,aAAcoJ,KAAKpJ,kBAI3B,gCACI,oBAAIrB,UAAU,YAAYL,GAAG,aAA7B,SAA2CsM,IAC3C,kGAGR,cAACK,EAAD,CACI7H,YAAaW,EACbZ,UAAWuH,IAEf,cAACQ,EAAD,CACItF,QAASiF,EACTnF,cAAeA,EACfR,iBAAkBkE,KAAKlE,iBACvBD,mBAAoBmE,KAAKnE,+B,GA1MtB2E,IAAMC,WAkNlBY,I,MCtMAU,MAxBf,WACI,OACI,mCACI,sBAAKxM,UAAU,kBAAf,UACI,oBAAIA,UAAU,eAAd,6BACA,oBAAIA,UAAU,QAAd,uEAGA,qBAAKA,UAAU,gBAAf,SAEI,6KAGQ,uBACA,uBAJR,2J,MCULyM,OApBf,WACI,OACI,mCACI,sBAAKzM,UAAU,oBAAf,UACI,oBAAIA,UAAU,iBAAd,8BACA,uBACA,qBAAKA,UAAU,kBAAf,SACI,uBAAMA,UAAU,OAAhB,UACI,uBAAOqC,KAAK,QAAQyE,YAAY,uBAChC,uBACA,uBAAOzE,KAAK,WAAWyE,YAAa,uBACpC,uBACA,uBAAOzE,KAAM,sBCd/BqK,GAAMC,aAERC,GAAS,CACT5K,QAAS,yBAIT,OAAQ0K,GAAIG,eACR,IAAK,QACDD,GAAO5K,QAAU,sBACjB,MAEJ,IAAK,aACD4K,GAAO5K,QAAU,yBAKd4K,UC+BAE,I,MAnCF,WACT,OACI,cAAC,IAAD,UACI,sBAAKnN,GAAG,YAAYK,UAAU,gBAA9B,UACI,sBAAKA,UAAU,gBAAf,UACI,qBAAKA,UAAU,cAAf,SACI,cAAC,IAAD,CAAM+M,GAAG,IAAT,SAAa,yDAEjB,sBAAK/M,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,cAAC,IAAD,CAAM+M,GAAG,YAAT,SAAqB,8CAEzB,qBAAK/M,UAAU,aAAf,SACI,cAAC,IAAD,CAAM+M,GAAG,cAAT,SAAuB,sDAKnC,8BACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,YAAYC,QAAS,cAAC,EAAD,MAEjC,cAAC,IAAD,CAAOD,KAAK,cAAcC,QAAS,cAAC,GAAD,MAEnC,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,EAAD,WAIjC,mBAAGjN,UAAU,SAAb,SAAuB4M,GAAO5K,iBC9B/BkL,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjM,MAAK,YAAkD,IAA/CkM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFrK,SAASC,eAAe,SAM1B0J,O","file":"static/js/main.e3e2fbf4.chunk.js","sourcesContent":["// Handle function and return next/previous buttons\r\n\r\nimport React from \"react\";\r\nimport \"./SearchLayout.css\";\r\n\r\nfunction PrevNext(props) {\r\n    function onSwitch(event) {\r\n        const target = event.target;\r\n        // G1: have to change below from const to let in order for error catch to set value to index 0\r\n        let searchIndex = target.id === \"next\" ? props.index + 1 : props.index - 1; // passing in this.state.searchIndex value, 'next' will +1, 'prev' will -1        \r\n        if (props.array.length === 0) {\r\n            return; // G1: in event of empty searchResults\r\n        }\r\n        if (searchIndex < 0 || searchIndex > (props.array.length - 1) ) {            \r\n            searchIndex = 0;\r\n        } // G1: set index to 0 when -1 or exceed 9\r\n        \r\n        props.prevNextState(searchIndex); // pass searchIndex to SearchScreen.js/prevNextState() to set this.state.searchIndex, searchTitle and searchURL\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button className=\"button\" id=\"prev\" name=\"prev\" onClick={onSwitch}>Previous</button>\r\n            <button className=\"button\" id=\"next\" name=\"next\" onClick={onSwitch}>Next</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PrevNext;","// Update this.state.favourites/history when component is mounted\r\n\r\nfunction updateList(list) { // this.state.favourites/history is passed in as argument in SearchScreen.js/componentDidMount()\r\n    if (JSON.parse(localStorage.getItem(list)) === null) { // if variable is null after parsing \r\n        return []; // return an empty array\r\n    } else {\r\n        return JSON.parse(localStorage.getItem(list)); // otherwise return array from Windows.localStorage\r\n    }\r\n}\r\n\r\nexport default updateList;","// Add to Favourites and History lists\r\n\r\nfunction addList(props, target) {\r\n    const p = new Promise((resolve) => {\r\n        let pList = props.list; // receive this.state.favourites/history\r\n\r\n        const item = {\r\n            title: props.title, // receive this.state.searchTitle\r\n            vtitle: props.vtitle,\r\n            url: props.url, // receive this.state.searchURL\r\n            artist: props.artist,\r\n        }\r\n\r\n        pList.unshift(item); // Append to start of pList\r\n\r\n        const res = { // responding with an object containing pList and event.target.id\r\n            list: pList,\r\n            target,\r\n        }\r\n\r\n        resolve(res);\r\n    })\r\n\r\n    p.then(res => props.addListState(res)) // pass resolve/response to SearchScreen.js/addListState() to set this.state.favourites/history and update Windows.localStorage\r\n}\r\n\r\nexport default addList;","// Return 'Add to Favourites' button\r\n\r\nimport addList from \"./AddList\";\r\nimport \"../SearchLayout.css\";\r\n\r\nfunction FavButton(props) {\r\n    return (\r\n        <button \r\n            className=\"button\"\r\n            id=\"addfav\" \r\n            onClick={(event) => {\r\n                addList(props, event.target.id); // pass props and event target id to AddList.js/addList()\r\n            }}\r\n        >Add to Favourites</button> \r\n    )\r\n}\r\n\r\nexport default FavButton;","// return YouTube Player\r\n\r\nimport React from 'react';\r\nimport YouTube from 'react-youtube';\r\n\r\nimport addList from './list/AddList';\r\nimport \"./SearchLayout.css\";\r\n\r\nfunction Player(props) {\r\n    const opts = { // setting optional parameters for player\r\n        height: '390',\r\n        width: '640',\r\n    };\r\n\r\n    return (\r\n        <YouTube\r\n            opts={opts}\r\n            videoId={props.url} // passing this.state.searchURL\r\n            onPlay={() => {\r\n                addList(props, \"player\"); // pass props and event target id to AddList.js/addList()\r\n            }} // setting id in element was not working (even though documentation says it should), so id is set in argument\r\n        />\r\n    )\r\n}\r\n\r\nexport default Player;","import axios from \"axios\";\r\n\r\n// const key = \"AIzaSyDfAJ42a9ADTNUaiY7BsDCvLTog_kVgHso\"; // generated credentials from Google API and Services\r\n// const key = \"AIzaSyBWydU1tn9HRWSyU0WS3iIWuJV2NxZ6pJI\";\r\n// const key = 'AIzaSyDrZ8qfU-eQS7wzjRNbEbQ-ErshTX4BKec'; //generated from Aunt\r\n// const key = \"AIzaSyBi7ZeNtEOLMq6rQZgRd3iQeEMIOhbpdd8\"; // generated by Aaron\r\n// const key = \"AIzaSyCJN1NG4ounKwBMkubL6xLCq4vIyiM6NJQ\"; // generated by Aaron\r\nconst key = \"AIzaSyC4fg8lFBo9e276Qf6Xbw16sP2TarXkb6E\" // generated by francine\r\nconst ytAPI = axios.create({\r\n    baseURL: \"https://www.googleapis.com/youtube/v3\",\r\n    params: {\r\n        part: \"snippet\", // The part parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet as dictated by documentation\r\n        maxResults: 10, // maximum of 20 results\r\n        key: key,\r\n        type: \"video\", // ensure only videos are returned, instead of channels/playlists\r\n        videoCategoryID: \"10\", // category for music\r\n    },\r\n    headers: {}\r\n});\r\n\r\nexport default ytAPI;","// Use search result to get related songs from Get data from Youtube Data API, and generate song title, url and thumbnail url\r\n\r\nimport ytAPI from \"../../API/YouTubeAPI.js\"\r\n\r\nasync function SearchRVids(props, searchResult) {\r\n    let rVideos = await ytAPI.get(\"/search\", {\r\n        params: {\r\n            relatedToVideoId: searchResult, // pass in search result videoId from Search.js/search()\r\n        }\r\n    }).then((response) => {\r\n        const { data } = response;\r\n\r\n        const filterSnippet = data.items.filter((item) => { // not all results have snippet for title and thumbnails, as the videos are unavailable\r\n            return item.snippet != null;\r\n        })\r\n\r\n        const result = filterSnippet.map((item) => {\r\n            return {\r\n                vtitle: item.snippet.title, // title of video\r\n                url: item.id.videoId, // video url\r\n                thumbnailurl: item.snippet.thumbnails.default.url // url of thumbnail picture\r\n            }\r\n        })\r\n        return result; // searchResults = {title, url, thumbnailurl}\r\n    })\r\n\r\n    props.searchRVidsState(rVideos) // pass searchResults to SearchScreen.js/searchState() to set this.state.relatedVideos\r\n    document.getElementById(\"suggartist\").value = \"default\";\r\n    document.getElementById(\"suggsong\").value = \"default\";\r\n    document.getElementById(\"searchbutton\").disabled = true; // disable search button\r\n}\r\n\r\nexport default SearchRVids;","// Return value of selection from lists / generate lists from arrays / return History and Favourites list elements\r\n\r\nimport React from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport SearchRVids from \"../searching/SearchRVids\"\r\nimport \"../SearchLayout.css\";\r\n\r\nfunction SelectList(props) {\r\n    function select(event) {\r\n        let p = new Promise((resolve) => {\r\n            const target = event.target;\r\n            const video = target.id === \"favourites\" ? props.favourites.find(item => item.vtitle === target.value) : props.history.find(item => item.vtitle === target.value);\r\n            // based on event target id, find the item in array whose song title corresponds with the value of target\r\n\r\n            SearchRVids(props, video.url);\r\n            resolve(video);\r\n        })\r\n\r\n        p.then((video) => {\r\n            props.selectListState(video) // pass the item to SearchScreen.js/selectListState() to set state for this.state.searchTitle and searchURL\r\n\r\n            document.getElementById(\"favourites\").value = \"default\"\r\n            document.getElementById(\"history\").value = \"default\"\r\n        })\r\n    }\r\n\r\n    return (\r\n        // options are generated from the favourites and history array by .map()\r\n        <div>\r\n            <select className=\"dropdown\" id=\"favourites\" onChange={select}>\r\n                <option value=\"default\" selected disabled>Favourites</option>\r\n                {props.favourites.map((item) => {\r\n                    return <option key={uuidv4()}>{item.vtitle}</option>\r\n                })}\r\n            </select>\r\n            <select className=\"dropdown\" id=\"history\" onChange={select}>\r\n                <option value=\"default\" selected disabled>History</option>\r\n                {props.history.map((item) => {\r\n                    return <option key={uuidv4()}>{item.vtitle}</option>\r\n                })}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectList;","// Get data from Youtube Data API to generate song title and url / activate search for related video function\r\n\r\nimport ytAPI from \"../../API/YouTubeAPI.js\"\r\nimport SearchRVids from \"./SearchRVids.js\"\r\n\r\nasync function search(props, event) {\r\n    event.preventDefault(); \r\n    \r\n    let searchResults = await ytAPI.get(\"/search\", {\r\n        params: {\r\n            q: props.inputSong + \" \" + props.inputArtist, // pass in this.state.inputSong/inputArtist from searchbar\r\n        }\r\n    }).then((response) => { \r\n        const { data } = response;\r\n        const result = data.items.map((item) => {\r\n            return {\r\n                vtitle: item.snippet.title, // video title\r\n                title: props.inputSong, // song title\r\n                url: item.id.videoId, // song id\r\n                artist: props.inputArtist, // song artist\r\n            }\r\n        })\r\n        return result; // searchResults = {vtitle, title, url, artist}\r\n    })\r\n    props.searchState(searchResults) // pass searchResults to SearchScreen.js/searchState() to set this.state.searchResults, searchTitle, searchVTitle and searchURL\r\n    SearchRVids(props, searchResults[0].url);\r\n    document.getElementById(\"suggartist\").value = \"default\";\r\n    document.getElementById(\"suggsong\").value = \"default\";\r\n    document.getElementById(\"inputsong\").value = \"\";\r\n}\r\n\r\nexport default search;","// handle input for song search bar and song artist dropdown selection\r\n\r\nfunction setInput(props, event) {\r\n    const output = {\r\n        result: event.target.value,\r\n        target: event.target.id,\r\n    }\r\n    props.handleInputState(output); // pass event.target.value to SearchScreen.js/handleInputState() to set this.state.inputSong/inputArtist\r\n}\r\n\r\nexport default setInput;","import axios from \"axios\";\r\n\r\nconst ShazamAPI = axios.create({\r\n    baseURL: \"https://shazam.p.rapidapi.com/\",\r\n    params: {offset: '0', limit: '5'},\r\n    headers: {\r\n        'x-rapidapi-host': 'shazam.p.rapidapi.com',\r\n        'x-rapidapi-key': 'bd52c7831bmsh885f8cdd1f00f06p13ec79jsn09e6320cff58'\r\n    }\r\n});\r\n\r\n// Spare API Key: 66f75eb6ebmshb919ecdbb43a32ep1f9ed5jsnd03f0d01f882\r\n// key 429 @ 9.30pm 9 Dec: bd52c7831bmsh885f8cdd1f00f06p13ec79jsn09e6320cff58\r\n\r\nexport default ShazamAPI;","// get data from Shazam API to generate list of artists from search song title \r\n\r\nimport ShazamAPI from \"../../API/ShazamAPI.js\"\r\n\r\nfunction searchArtist(props, video, song, event) {\r\n\r\n    let outerP = new Promise((resolve) => {\r\n\r\n        let innerP = new Promise(async (resolve, reject) => {\r\n            let notFound = [{ title: \"Not Found\", artist: \"Not Found\" }];\r\n            let found = await ShazamAPI.get(\"/search\", {\r\n                params: { term: song }, // pass in this.state.inputSong from searchbar\r\n            }).then((found) =>{\r\n                if (Object.entries(found.data).length >= 2) {\r\n                    resolve(found);\r\n                } else {\r\n                    reject(notFound);\r\n                }\r\n            }).catch((error) => {\r\n                    console.log('Shazam error 429!');\r\n                    return;\r\n                });            \r\n        })\r\n        let response = innerP.then((found) => {\r\n            const data = found.data.tracks.hits;\r\n            const result = data.map((item) => {\r\n                return {\r\n                    title: item.track.title, // song title\r\n                    artist: item.track.subtitle // song artist\r\n                }\r\n            })\r\n            return result; // searchResults = {artist}\r\n        })\r\n        resolve(response);\r\n    });\r\n\r\n    outerP.then((res) => {\r\n        props.artistResultsState(res);\r\n        if (event.target.id === song) { // this is for RelatedVideo.js/select()\r\n            props.selectRVidsState(video, res); // set state for searchTitle, searchURL, searchVTitle, searchArtist\r\n        }\r\n        document.getElementById(\"suggartist\").value = \"default\";\r\n        document.getElementById(\"suggsong\").value = \"default\";\r\n        return res;\r\n    })\r\n}\r\n\r\nexport default searchArtist;              ","// send event target values and props to SearchArtist.js/searchArtist\r\n\r\nimport searchArtist from \"./SearchArtist\";\r\nimport \"../SearchLayout.css\";\r\n\r\nfunction artSuggest(props, event) {\r\n    // update search bar input, pass searchbar input to SearchArtist.js/searchArtist() to generate list of artists associated with song title\r\n    let p = new Promise((resolve, reject) => {\r\n        if (event.target.value === \"\") {\r\n            reject(console.log(\"Nothing to Search\"))\r\n        } else {\r\n            resolve(event.target.value)\r\n        }\r\n    });\r\n\r\n    p.then((res) => {\r\n        searchArtist(props, \" \", res, event); // if event target value has a string, execute searchArtist()\r\n        document.getElementById(\"suggsong\").disabled = false;\r\n    }).catch(res => res)\r\n}\r\n\r\nexport default artSuggest;","// return search textbox elements and search button\r\n\r\nimport React from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport debounce from 'lodash.debounce';\r\nimport { useCallback } from \"react\";\r\n\r\nimport search from \"./Search\";\r\nimport setInput from \"./SetInput\";\r\nimport artSuggest from \"./ArtistSuggest\";\r\nimport \"../SearchLayout.css\";\r\n\r\nfunction HandleInput(props) {\r\n    const debouncedChangeHandler = useCallback( // a lodash function to call function once after finished typing\r\n        debounce((event) => artSuggest(props, event), 500)\r\n        , [props]);\r\n\r\n    return (\r\n        <form\r\n            onSubmit={(event) => search(props, event)}\r\n        >\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Enter Song Title Here!\"\r\n                id=\"inputsong\"\r\n                onChange={debouncedChangeHandler}\r\n            ></input>\r\n\r\n            <select\r\n                id=\"suggsong\"\r\n                className=\"dropdown\"\r\n                onChange={(event) => setInput(props, event)}\r\n                value={props.inputSong}\r\n                disabled\r\n            >\r\n                <option value=\"default\">Suggested Songs</option>\r\n                {props.artistResults.map((item) => {\r\n                    return <option key={uuidv4()}>{item.title}</option>\r\n                })}\r\n            </select>\r\n\r\n            <select\r\n                id=\"suggartist\"\r\n                className=\"dropdown\"\r\n                onChange={(event) => setInput(props, event)}\r\n                value={props.inputArtist}\r\n                disabled\r\n            >\r\n                <option value=\"default\">Suggested Artists</option>\r\n                {props.artistResults.map((item) => {\r\n                    return <option key={uuidv4()}>{item.artist}</option>\r\n                })}\r\n            </select>\r\n\r\n            <button className=\"button\" id=\"searchbutton\" disabled>Search</button>\r\n        </form> // run Search.js/search() upon submission\r\n    )\r\n}\r\n\r\nexport default HandleInput;","// Return value of selection from related videos / Return related videos element\r\n\r\nimport React from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport searchArtist from \"./SearchArtist\";\r\nimport \"../SearchLayout.css\";\r\n\r\nfunction RelatedVideos(props) {\r\n    function select(event) {\r\n        let p = new Promise((resolve) => {\r\n            const target = event.target;\r\n            const video = props.rvideos.find(item => item.vtitle === target.id); // find the item in array whose song title corresponds with the id of target\r\n            resolve(video);\r\n        })\r\n\r\n        p.then(async (video) => {\r\n            const sTitle = await video.vtitle;\r\n            searchArtist(props, video, sTitle, event); // search for artists based on this.state.searchTitle\r\n        })\r\n    }\r\n\r\n    // receive this.state.relatedVids array and map into a column \r\n    return (\r\n        <div className=\"relatedvids\">\r\n            {props.rvideos.map((item) => {\r\n                return (\r\n                    <div key={uuidv4()} id={item.vtitle}>\r\n                        <img\r\n                            className=\"rvidthumbnail rvid\"\r\n                            id={item.vtitle}\r\n                            src={`${item.thumbnailurl}`}\r\n                            onClick={select}\r\n                            alt=\"music video\"\r\n                        ></img>\r\n                        <p className=\"rvidtitle rvid\">{item.vtitle}</p>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RelatedVideos;","import axios from 'axios';\r\n\r\nconst API = axios.create({\r\n    baseURL: \"https://api.lyrics.ovh/v1/\",\r\n});\r\n\r\n\r\nexport default API;","import axios from 'axios';\r\n\r\nconst API = axios.create({\r\n    baseURL: 'https://voicerss-text-to-speech.p.rapidapi.com',\r\n    headers: {\r\n        'x-rapidapi-host': 'voicerss-text-to-speech.p.rapidapi.com',\r\n        'x-rapidapi-key': 'bd52c7831bmsh885f8cdd1f00f06p13ec79jsn09e6320cff58'\r\n    }\r\n});\r\n\r\nexport default API;","import React, { useState } from 'react';\r\nimport API from '../API-g1';\r\n// import langList from './lang';\r\n\r\nfunction TextToSpeech(props) {\r\n        \r\n    let waitLyrics = 'none';\r\n    if (props.sendOutput.length === 0 || props.sendOutput === 'Lyrics not found...') {\r\n        waitLyrics = 'none';\r\n    } else waitLyrics = 'inline';\r\n    \r\n    let response2;\r\n    let response3;\r\n    let response4;\r\n\r\n    const [playCount, setplayCount] = useState(0);    \r\n    const [rcvAudio, setrcvAudio] = useState(\"\"); // song audio part 1\r\n    const [reserveAudio2, setreserveAudio2] = useState(\"\"); // song audio part 2 if needed\r\n    const [reserveAudio3, setreserveAudio3] = useState(\"\"); // song audio part 3 if needed\r\n    const [reserveAudio4, setreserveAudio4] = useState(\"\"); // song audio part 4 if needed\r\n    const [genderSubmit, setgenderSubmit] = useState('en-us');\r\n\r\n    const selectGender = () => {        \r\n\r\n        return (\r\n            <select id='lang' name = 'gender' defaultValue='Linda' onChange={handleGenderChange} style={{display:waitLyrics}}>\r\n                <option key='gender1' value='Linda'>Female</option>\r\n                <option key='gender2' value='John'>Male</option>                \r\n            </select>\r\n        )\r\n    }\r\n\r\n    function handleGenderChange (e) {\r\n        setgenderSubmit(e.target.value);\r\n    }\r\n\r\n    async function handleSubmit (e) {\r\n        e.preventDefault();\r\n        console.log('Submitting props: ', props);\r\n        console.log('Submitting text: ', props.sendOutput);\r\n        // console.log('Submitting lang:', langSubmit);\r\n        console.log('Submitting text.length: ', props.sendOutput.length);\r\n\r\n        let testABC = props.sendOutput.replace(/\\r/g,'. '); // text to speech api uses '. ' for pause, need the space after punctuation\r\n        testABC = props.sendOutput.replace(/\\n/g,'. '); // 1st argu is regex /string/g where g is global, whole string, /i will be case-insensitive /m multiline\r\n        // https://www.w3schools.com/jsref/jsref_regexp_g.asp\r\n        \r\n    /* Cannot use this reduction, somehow corrupts the text in certain places. \r\n        // testABC = testABC.replace(/. . . . /g,'. '); // reduce unnecessary . step 1\r\n        // testABC = testABC.replace(/. . . /g,'. '); // reduce step 2       \r\n        // testABC = testABC.replace(/. . /g,'. '); // reduce step 3\r\n    */\r\n\r\n        let part1 = \"\";\r\n        let part2 = \"\";\r\n        let part3 = \"\";\r\n        let part4 = \"\";\r\n\r\n        if (testABC.length > 1100) {\r\n            part1 = testABC.substring(0, 1100); // 1100 for in case of few special chars, max 1365 = 404 error.... hmmmm so actual limit is 2728 bytes\r\n            let testLength = part1.lastIndexOf('. '); // loophole: if last lines near end is ending with ! or ? non-crit as shouldnt be too far from 1364 unless entire paras before 1364 is ! or ? zzz....\r\n            console.log('check for last . :', testLength); // eg 1353, last index of '. '\r\n            // need if check? if (testLength === -1) no occurence of '. ' unlikely whole song no '. '\r\n            part1 = testABC.substring(0, (testLength+1)); // truncate at last . +1\r\n            part2 = testABC.substring((testLength+1)); // need part 3?\r\n            testABC = part2; // reuse testABC variable for part 3 shuffling\r\n            // part 3...\r\n            if (part2.length > 1100) {\r\n                part2 = part2.substring(0, 1100);\r\n                testLength = part2.lastIndexOf('. ');\r\n                console.log('check for last . :', testLength);\r\n                part2 = part2.substring(0, (testLength+1));\r\n                part3 = testABC.substring((testLength+1)); // as testABC still retains part2 and part3 string\r\n                testABC = part3;\r\n                // part 4\r\n                if (part3.length > 1100) {\r\n                    part3 = part3.substring(0, 1100);\r\n                    testLength = part3.lastIndexOf('. ');\r\n                    console.log('check for last . :', testLength);\r\n                    part3 = part3.substring(0, (testLength+1));\r\n                    part4 = testABC.substring((testLength+1));\r\n                }\r\n            }\r\n\r\n        } else part1 = testABC; // when song length needs only 1 part                \r\n        \r\n        console.log('song part 1 :', part1);\r\n        console.log('song part 2 :', part2);\r\n        console.log('song part 3 :', part3);\r\n        console.log('song part 4 :', part4);\r\n\r\n\r\n        // let apikey = \"5\"; // false key for error testing\r\n        let apikey = \"52b16d4b4f1246ee800ea25d1b9fe536\"; // key tied to g1 email\r\n        // let apikey = \"3078a5b6303a4d8f9c134eb7e115fc41\"; // key tied to g1 email2 for presentation\r\n        // let apilang = \"zh-cn\";\r\n        let apilang = \"en-us\";\r\n        let apicodec = \"MP3\";\r\n        // let apivoice = \"Amy\"; testing\r\n        let apiformat = \"8khz_8bit_mono\"; // default is 8khz_8bit_mono\r\n        let apiB64Status = true; // default is false, true for output as Base64 string format\r\n\r\n        // submitting text to API in 4 parts if necessary\r\n        try {\r\n            const response = await API.get(`/?key=${apikey}&hl=${apilang}&c=${apicodec}&f=${apiformat}&v=${genderSubmit}&src=${part1}&b64=${apiB64Status}`);\r\n\r\n            if (part2 !== \"\") {            \r\n                response2 = await API.get(`/?key=${apikey}&hl=${apilang}&c=${apicodec}&f=${apiformat}&v=${genderSubmit}&src=${part2}&b64=${apiB64Status}`);\r\n                setreserveAudio2(response2.data);\r\n    \r\n                if (part3 !== \"\") {\r\n                    response3 = await API.get(`/?key=${apikey}&hl=${apilang}&c=${apicodec}&f=${apiformat}&v=${genderSubmit}&src=${part3}&b64=${apiB64Status}`);\r\n                    setreserveAudio3(response3.data);\r\n    \r\n                    if (part4 !== \"\") {\r\n                        response4 = await API.get(`/?key=${apikey}&hl=${apilang}&c=${apicodec}&f=${apiformat}&v=${genderSubmit}&src=${part4}&b64=${apiB64Status}`);\r\n                        setreserveAudio4(response4.data);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (response.status === 200 ) {    \r\n                setplayCount(1); // set playing count at part 1\r\n                setrcvAudio(response.data);\r\n            }\r\n                \r\n        } catch (e) {\r\n            console.log(\"404 error in submission to speech\");\r\n            setplayCount(0);\r\n            return;\r\n        }\r\n    }\r\n\r\n    const playAudio = () => {\r\n\r\n        if (rcvAudio===\"\") {\r\n            return;            \r\n            //     <p>no audio currently</p>            \r\n        }\r\n\r\n        if (rcvAudio.substring(0,5) === \"ERROR\") {\r\n            console.log(rcvAudio);\r\n            return;\r\n            // <p>{rcvAudio} Please contact admin</p>            \r\n        } // api has its own defined error set\r\n\r\n        return (\r\n            <div>\r\n            {/* <p>have audio {playCount}</p> */}\r\n            <audio id=\"audioPlayer\" src={rcvAudio} autoPlay=\"autoplay\" onEnded={checkPlay} controls style={{height: '22px'}}>audio not supported</audio>            \r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    function checkPlay() {\r\n        if (playCount === 0) {\r\n            console.log('playcount: ', playCount);\r\n            return;\r\n        }\r\n        if (playCount === 4) {\r\n            setplayCount(0);\r\n            console.log('playcount: ', playCount);\r\n            return; // reset play count to 0 once part 4 end\r\n        }\r\n        if (playCount === 3) {\r\n            setplayCount(4);\r\n            console.log('playcount: ', playCount);\r\n            setrcvAudio(reserveAudio4);\r\n            return;\r\n        }\r\n        if (playCount === 2) {\r\n            setplayCount(3);\r\n            console.log('playcount: ', playCount);\r\n            setrcvAudio(reserveAudio3);\r\n            return;\r\n        }\r\n        if (playCount === 1) {\r\n            setplayCount(2);\r\n            console.log('playcount: ', playCount);\r\n            setrcvAudio(reserveAudio2);\r\n            return;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <form onSubmit={handleSubmit}>\r\n                    {selectGender()}\r\n                    <input className='button' type='submit' value='Voice Reader' style={{display:waitLyrics}}/>\r\n                </form>\r\n                {playAudio(rcvAudio)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextToSpeech;","import React from \"react\";\r\nimport API from \"../API-aaa\";\r\nimport \"./SearchLayout.css\";\r\nimport TextToSpeech from \"./text2speech\";\r\n// const reactStringReplace = require('react-string-replace');\r\n\r\nclass OvhLyric extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.fetchOvhData = this.fetchOvhData.bind(this);\r\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n        this.state = {\r\n            // lyricsAltFormat: [],\r\n            // replacedSlashR: [],\r\n            lyrics: [],\r\n            inputArtist: \"\",\r\n            inputSong: \"\",\r\n            displayErrorMsg: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"^This above is my first render\");\r\n        this.fetchOvhData();\r\n    }\r\n\r\n    handleFormSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const p = new Promise((resolve) => {\r\n            const cleanArtist = this.props.inputArtist.replace(\r\n                /[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\r\n                \"\"\r\n            );\r\n            const cleanSong = this.props.inputSong.replace(\r\n                /[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\r\n                \"\"\r\n            );\r\n\r\n            this.setState({\r\n                ...this.state,\r\n                inputArtist: cleanArtist,\r\n                inputSong: cleanSong,\r\n            });\r\n\r\n            console.log(\"TEST! \", this.state.inputArtist);\r\n            console.log(\"TEST! \", this.state.inputSong);\r\n            resolve(\"SUCCESS\");\r\n        });\r\n\r\n        p.then((res) => {\r\n            console.log(res);\r\n            this.fetchOvhData();\r\n        });\r\n    }\r\n\r\n    async fetchOvhData() {\r\n        console.log(\"TEST1! \", this.state.inputArtist);\r\n        console.log(\"TEST1! \", this.state.inputSong);\r\n        try {\r\n            if (this.state.inputArtist && this.state.inputSong) {\r\n                const response = await API.get(\r\n                    `/${this.state.inputArtist}/${this.state.inputSong}`\r\n                );\r\n                let lyrics = [];\r\n                if (response.status === 200) {\r\n                    lyrics = response.data.lyrics;\r\n                }\r\n                // console.log(\"Full API data: \", response);\r\n                // const replacedSlashR = lyrics.replace(/Paroles de la chanson/g, 'he');\r\n                // console.log(\"lyrics  format: \", replacedSlashR);\r\n\r\n                this.setState({\r\n                    ...this.state,\r\n                    lyrics,\r\n                    // replacedSlashR,\r\n                });\r\n            }\r\n        } catch (error) {\r\n            this.setState({\r\n                ...this.state,\r\n                lyrics: \"Lyrics not found...\",\r\n                // displayErrorMsg: \"Lyrics not found...\",\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // const { inputSong } = this.state;\r\n        // const { inputArtist } = this.state;\r\n        // const { replacedSlashR } = this.state;\r\n        // console.log('Hello printing lyric: ', lyrics); //this console logs formatted version but format disappears when rendered to HTML\r\n        const { displayErrorMsg } = this.state;\r\n        const { lyrics } = this.state;\r\n        let submitContent = lyrics; // G1: need for passing to text2speech\r\n\r\n        // const content = replacedSlashR;\r\n        // let formattedLyrics;\r\n        // formattedLyrics = reactStringReplace(content, '\\n', (match, i) => ( //replace \\n\r\n        //     <br />                    // with <br />\r\n        // ));\r\n\r\n        // formattedLyrics = reactStringReplace(formattedLyrics, 'Paroles de la chanson', (match, i) => (\r\n        //     <p></p>\r\n        // ));\r\n\r\n        // formattedLyrics = reactStringReplace(formattedLyrics, 'par', (match, i) => (\r\n        //     <i> by </i>\r\n        // ));\r\n        return (\r\n            <div className=\"lyricbox\">\r\n                <form onSubmit={this.handleFormSubmit}>\r\n                    <input className=\"button\" type=\"submit\" value=\"Display Lyrics\"></input>\r\n                </form>\r\n                <div className=\"displayWindow2\">\r\n                    <TextToSpeech sendOutput={submitContent} />\r\n                </div>\r\n                <div className=\"displayWindow2\" style={{ display: lyrics.length === 0 ? 'none' : 'inline' }}>\r\n                    <textarea\r\n                        readOnly\r\n                        placeholder=\"incoming lyrics data\"\r\n                        value={lyrics}\r\n                        rows=\"30\"\r\n                        cols=\"52\"\r\n                    />\r\n                    {displayErrorMsg}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default OvhLyric;\r\n","export default __webpack_public_path__ + \"static/media/christmas-1920.e21d8f7b.jpg\";","export default __webpack_public_path__ + \"static/media/christmas-dark-1920.b58bc2e0.jpg\";","import React, { useState } from 'react';\r\nimport xmasImage from '../assets/christmas-1920.jpg'\r\nimport xmasImage2 from '../assets/christmas-dark-1920.jpg'\r\n\r\nfunction DarkMode() {\r\n    // currently default page start with night mode, as not loading bckgnd image\r\n    let day = '👼'; // using day for night xmas\r\n    let night = '💤';\r\n    let xmas = '🎅';\r\n\r\n    const [darkMode, setdarkMode] = useState(xmas);\r\n    const [cssState, setcssState] = useState('xmas'); // css classname day with white background / black font or Xmas?    \r\n\r\n    function handleClick() {\r\n        if (darkMode === day) {\r\n            setdarkMode(night);\r\n            setcssState('night'); // css classname night with dark background / white font \r\n            document.getElementById(\"wholebody\").style.backgroundImage = `url(${xmasImage2})`;            \r\n        } else if (darkMode === night) {\r\n            setdarkMode(xmas);\r\n            setcssState('xmas');\r\n            document.getElementById(\"wholebody\").style.backgroundImage = \"none\";\r\n            document.body.style.backgroundImage = \"none\";\r\n            // document.body.style.backgroundColor = \"rgba(26, 26, 26)\";\r\n        } else if (darkMode === xmas) {\r\n            setdarkMode(day);\r\n            setcssState('day');\r\n            document.getElementById(\"wholebody\").style.backgroundImage = `url(${xmasImage})`;            \r\n        }\r\n        document.getElementById(\"wholebody\").className = `webpage ${cssState}`; // add class, not override\r\n        document.body.style.className = `webpage ${cssState}`;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button style={{ backgroundColor: 'darkgrey' }} name='settings' onClick={handleClick}>{darkMode}</button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DarkMode;","import React from \"react\";\r\nimport \"./SearchLayout.css\";\r\n\r\nimport PrevNext from \"./PrevNext.js\";\r\nimport updateList from \"./list/UpdateList.js\";\r\nimport FavButton from \"./list/FavButton.js\";\r\nimport Player from \"./Player.js\";\r\nimport SelectList from \"./list/SelectList.js\";\r\nimport HandleInput from \"./searching/HandleInput\"\r\nimport RelatedVideos from \"./searching/RelatedVideo\";\r\nimport Main from \"./routing/Main.js\";\r\nimport MainScreen from './MainScreen';\r\nimport DarkMode from \"./DarkMode\";\r\n\r\nclass SearchScreen extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.prevNextState = this.prevNextState.bind(this);\r\n        this.addListState = this.addListState.bind(this);\r\n        this.selectListState = this.selectListState.bind(this);\r\n        this.handleInputState = this.handleInputState.bind(this);\r\n        this.searchState = this.searchState.bind(this);\r\n        this.searchRVidsState = this.searchRVidsState.bind(this);\r\n        this.selectRVidsState = this.selectRVidsState.bind(this);\r\n        this.artistResultsState = this.artistResultsState.bind(this);\r\n\r\n        this.state = {\r\n            inputSong: \"\", // input from song searchbar\r\n            inputArtist: \"\", // input from artist searchbar\r\n            searchResults: [], // an array of results from searching songs. Includes title and videoId\r\n            artistResults: [], // an array of suggested artists from searching songs\r\n            searchIndex: 0, // index number for searchResult array\r\n            searchTitle: \"\", // title of selected song\r\n            searchURL: \"\", // videoId of selected song\r\n            searchArtist: \"\", // artist of selected song\r\n            searchVTitle: \"\",\r\n            favourites: [], // array of favourited items that is synced up to Windows.localStorage(\"favourites\")\r\n            history: [], // array of history items that is synced up to Windows.localStorage(\"history\")\r\n            relatedVids: [], // array of videos related to search result\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let favourites = await updateList(\"favourites\"); // updating favourites/history from Windows.localStorage(\"favourites\"/\"history\")\r\n        let history = await updateList(\"history\");\r\n\r\n        this.setState({ // and setting this.state.history/favourites\r\n            ...this.state,\r\n            favourites,\r\n            history,\r\n        })\r\n    }\r\n\r\n    // based on event target id, after adding to favourites/history list, set this.state.history/favourites and sync with Windows.localStorage(\"favourites\"/\"history\")\r\n    addListState(res) { // passing in list object {title, url}, as well as event.target.id\r\n        if (res.target === \"addfav\") {\r\n            this.setState({ favourites: res.list });\r\n            localStorage.setItem(\"favourites\", JSON.stringify(this.state.favourites));\r\n        } else {\r\n            this.setState({ history: res.list });\r\n            localStorage.setItem(\"history\", JSON.stringify(this.state.history));\r\n        }\r\n    }\r\n\r\n    // going to the next or previous item on this.state.searchResults array\r\n    prevNextState(searchIndex) { // passing in a number value to pass in as array index number\r\n        this.setState({\r\n            ...this.state,\r\n            searchIndex,\r\n            searchTitle: this.state.searchResults[searchIndex].title,\r\n            searchURL: this.state.searchResults[searchIndex].url,\r\n            searchArtist: this.state.searchResults[searchIndex].artist,\r\n            searchVTitle: this.state.searchResults[searchIndex].vtitle,\r\n        })\r\n    }\r\n\r\n    // select something from this.state.favourites/history array to play\r\n    selectListState(video) { // passing in selected video's title, url\r\n        this.setState({\r\n            ...this.state,\r\n            searchTitle: video.title,\r\n            searchVTitle: video.vtitle,\r\n            searchURL: video.url,\r\n            searchArtist: video.artist,\r\n            searchIndex: 0, // reset searchIndex\r\n            searchResults: this.state.relatedVids,\r\n        })\r\n    }\r\n\r\n    // updating input after typing in searchbar\r\n    handleInputState(output) { // passing in event.target.value\r\n        if (output.target === \"suggsong\") {\r\n            this.setState({ inputSong: output.result })\r\n            document.getElementById(\"suggartist\").disabled = false;\r\n        } else {\r\n            this.setState({ inputArtist: output.result });\r\n            document.getElementById(\"searchbutton\").disabled = false; // enable search button when searchbar is not empty\r\n        }\r\n    }\r\n\r\n    // execute after returning search results\r\n    searchState(searchResults) { // passing in searchResults object {title, url}\r\n        this.setState({\r\n            ...this.state,\r\n            artistSearch: [],\r\n            searchResults,\r\n            searchTitle: searchResults[this.state.searchIndex].title, // setting this.state.searchTitle, searchVTitle and searchURL based on searchResults[searchIndex = 0]\r\n            searchVTitle: searchResults[this.state.searchIndex].vtitle,\r\n            searchURL: searchResults[this.state.searchIndex].url,\r\n            searchArtist: searchResults[this.state.searchIndex].artist,\r\n        })\r\n    }\r\n\r\n    // execute after finding related videos to search result\r\n    searchRVidsState(relatedVids) { // passing in searchResults object {title, url, thumbnailurl}\r\n        this.setState({ relatedVids })\r\n    }\r\n\r\n    // execute after selecting related video to play\r\n    selectRVidsState(video, res) {\r\n        this.setState({\r\n            ...this.state,\r\n            searchTitle: res[0].title,\r\n            searchVTitle: video.vtitle,\r\n            searchURL: video.url,\r\n            searchArtist: res[0].artist,\r\n        })\r\n    }\r\n\r\n    // get an array of suggested artists based on song name in search\r\n    artistResultsState(artistResults) {\r\n        this.setState({ artistResults });\r\n    }\r\n\r\n    render() {\r\n        const { inputSong } = this.state;\r\n        const { inputArtist } = this.state;\r\n        const { artistResults } = this.state;\r\n        const { searchTitle } = this.state;\r\n        const { searchVTitle } = this.state;\r\n        const { searchURL } = this.state;\r\n        const { searchArtist } = this.state;\r\n        const { searchIndex } = this.state;\r\n        const { favourites } = this.state;\r\n        const { history } = this.state;\r\n        const { relatedVids } = this.state;\r\n\r\n        return (\r\n            <div id=\"mainbody\" className=\"webpage\">\r\n                <div className=\"topnavbar\">\r\n                    {/* Search Bar Input */}\r\n                    <HandleInput\r\n                        inputSong={inputSong}\r\n                        inputArtist={inputArtist}\r\n                        artistResults={artistResults}\r\n                        handleInputState={this.handleInputState}\r\n                        searchState={this.searchState}\r\n                        searchRVidsState={this.searchRVidsState}\r\n                        artistResultsState={this.artistResultsState}\r\n                    />\r\n                    {/* Favourites and History Dropdown Lists */}\r\n                    <SelectList\r\n                        selectListState={this.selectListState}\r\n                        searchRVidsState={this.searchRVidsState}\r\n                        favourites={favourites}\r\n                        history={history}\r\n                    />\r\n                    <DarkMode />\r\n                </div>\r\n                <div className=\"searchscreen\">\r\n                    <div className=\"playerbox\">\r\n                        <div className=\"videobox\">\r\n                            {/* YouTube Player */}\r\n                            <Player\r\n                                list={history}\r\n                                title={searchTitle}\r\n                                vtitle={searchVTitle}\r\n                                url={searchURL}\r\n                                artist={searchArtist}\r\n                                addListState={this.addListState}\r\n                            />\r\n                        </div>\r\n                        <div className=\"vidnavbar\">\r\n                            {/* Previous and Next Buttons */}\r\n                            <PrevNext\r\n                                prevNextState={this.prevNextState}\r\n                                index={searchIndex} array={this.state.searchResults}\r\n                            />\r\n                            {/* <PrevNext\r\n                                prevNextState={this.prevNextState}\r\n                                index={searchIndex}\r\n                            /> */}\r\n                            {/* Add to Favourites Button */}\r\n                            <FavButton\r\n                                list={favourites}\r\n                                title={searchTitle}\r\n                                vtitle={searchVTitle}\r\n                                url={searchURL}\r\n                                artist={searchArtist}\r\n                                addListState={this.addListState}\r\n                            />\r\n                            {/* <button className=\"lyricbutton\">Display Lyrics</button> */}\r\n                        </div>\r\n                        <div>\r\n                            <h3 className=\"videoinfo\" id=\"videotitle\">{searchVTitle}</h3>\r\n                            <p>If lyrics cannot be found, please refine your search again!</p>\r\n                        </div>\r\n                    </div>\r\n                    <MainScreen\r\n                        inputArtist={searchArtist}\r\n                        inputSong={searchTitle}\r\n                    />\r\n                    <RelatedVideos\r\n                        rvideos={relatedVids}\r\n                        artistResults={artistResults}\r\n                        selectRVidsState={this.selectRVidsState}\r\n                        artistResultsState={this.artistResultsState}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchScreen;","import './styles/AboutUs.css'\r\n\r\nfunction AboutUs() {\r\n    return (\r\n        <>\r\n            <div className='about-container'>\r\n                <h2 className='about-header'>About the Team!</h2>\r\n                <h3 className='title'>\r\n                        Hello there! We're from the SkillsUnion Cohort 2 Group 2.\r\n                </h3>\r\n                <div className='about-content'>\r\n\r\n                    <p>\r\n                            We have been taking the Software Developer Immersive course for 11 weeks and \r\n                            this web application is the fruit of what we've learned so far! \r\n                            <br/>\r\n                            <br/>\r\n                            We hope the text-to-speech \"karaoke partner\" have brought you as much laughter as it did for us!\r\n                            Do check out our song recommendations too :)\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AboutUs;","import \"./styles/ContactUs.css\"\r\n\r\nfunction ContactUs() {\r\n    return (\r\n        <>\r\n            <div className='contact-container'>\r\n                <h2 className='contact-header'>Contact us here!</h2>\r\n                <br/>\r\n                <div className='contact-content'>\r\n                    <form className='form'>\r\n                        <input type='email' placeholder='Your Email Address'></input>\r\n                        <br/>\r\n                        <input type='textarea' placeholder ='Leave us a message'></input>\r\n                        <br/>\r\n                        <input type ='submit'></input>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ContactUs;","const env = process.env.REACT_APP_ENV;\r\n\r\nlet config = {\r\n    baseURL: \"http://localhost:3000\"\r\n}\r\n\r\nif (env) {\r\n    switch (env.toUpperCase()) {\r\n        case \"STAGE\":\r\n            config.baseURL = \"Staging Environment\";\r\n            break;\r\n\r\n        case \"PRODUCTION\":\r\n            config.baseURL = \"Production Environment\";\r\n            break;\r\n    }\r\n}\r\n\r\nexport default config;","import React from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Routes,\r\n    Route,\r\n    Link,\r\n} from \"react-router-dom\";\r\nimport SearchScreen from \"../SearchScreen\";\r\nimport AboutUs from \"./AboutUs\";\r\nimport ContactUs from \"./ContactUs\";\r\nimport config from \"../../config/index.js\"\r\nimport \"./styles/Main.css\";\r\n\r\n// G1: line 17 added webpage class as otherwise header styling jumps when click on darkmode\r\nconst Main = () => {\r\n    return (\r\n        <Router>\r\n            <div id=\"wholebody\" className=\"webpage night\">\r\n                <div className=\"nav-container\">\r\n                    <div className=\"main-header\">\r\n                        <Link to=\"/\"><h1>The Karaoke Website</h1></Link>\r\n                    </div>\r\n                    <div className=\"menu\">\r\n                        <div className=\"menu-items\">\r\n                            <Link to=\"/about-us\"><h2>About Us</h2></Link>\r\n                        </div>\r\n                        <div className=\"menu-items\">\r\n                            <Link to=\"/contact-us\"><h2>Contact Us</h2></Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* <div className=\"content\"> */}\r\n                <div>\r\n                    <Routes>\r\n                        <Route path=\"/about-us\" element={<AboutUs />}>\r\n                        </Route>\r\n                        <Route path=\"/contact-us\" element={<ContactUs />}>\r\n                        </Route>\r\n                        <Route path=\"/\" element={<SearchScreen />}>\r\n                        </Route>\r\n                    </Routes>\r\n                </div>\r\n                <p className=\"config\">{config.baseURL}</p>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\n\r\nexport default Main;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Main from './components/routing/Main';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main/> \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}